import org.apache.tools.ant.taskdefs.condition.Os
import java.awt.Desktop

apply plugin: 'java'
apply plugin: 'scala'

def findPlay20(){
	if(new File( '../play-2.0.4', 'play').exists()){
        project.ext.playHome = '../play-2.0.4'
        project.ext.playExec = new File('../play-2.0.4', 'play')
        return
    } else {
		def pathEnvName = ['PATH', 'Path'].find{ System.getenv()[it] != null }
		for(path in System.getenv()[pathEnvName].split(File.pathSeparator)){
			for(playExec in ['play.bat', 'play.sh', 'play']){
				if(new File(path, playExec).exists()){
					project.ext.playHome = path
					project.ext.playExec = new File(path, playExec)
					return
				}
			}
		}
	}
  throw new RuntimeException("""'play' command was not found in PATH.
Make sure you have Play Framework 2.0 installed and in your path""")
}
//check if the running system is windows
def checkWin(){
	return (Os.isFamily(Os.FAMILY_WINDOWS)) ? true : false
}

//prompt a value from the user, with a message
def prompt(message) {
	def console = System.console()
	if (console) {
		return console.readLine(message)
	} else {
		println("Cannot get console.")
		return false;
	}
}

findPlay20()

defaultTasks 'createStartBat'

task playConfig {
	doLast {
		def file = new File("./conf/application.conf")
		def text = file.text
		text = text.replaceFirst('include "config.conf"', 'include "conf/config.conf"')
		file.write(text)
	}
}

task playDist (type: Exec, dependsOn: playConfig) {
	commandLine playExec, "dist"
}

task playRevertConfig (dependsOn: playDist) {
	doLast {
		def file = new File("./conf/application.conf")
		def text = file.text
		text = text.replaceFirst('include "conf/config.conf"', 'include "config.conf"')
		file.write(text)
	}
}

task unzipDist (type: Exec, dependsOn: [playDist, playRevertConfig]) {
	workingDir './dist'
	commandLine "jar", "xf",  "*.zip"
}

task moveDist(type:Copy, dependsOn: unzipDist) {
   from './dist/what-1.0-SNAPSHOT'
   into '../what'
}

task delDistFolder(type: Delete, dependsOn: moveDist) {
	delete './dist'
}

task copyCharts(type: Copy, dependsOn: moveDist) {
	from './charts'
	into '../what/charts'
}

task copyConfig(type: Copy, dependsOn: moveDist) {
	from './conf/'
	into '../what/conf/'
	include '*.json'
	include 'config.conf'
}

task copyGeoIp(type: Copy, dependsOn: moveDist) {
	from './data/'
	into '../what/data/'
	include '*.dat'
}

task copyFiles(dependsOn: [moveDist, delDistFolder, copyCharts, copyConfig, copyGeoIp]) {
	new File("../what").mkdir()
	new File("../what/conf").mkdir()
	new File("../what/data").mkdir()
}

task createStartBat(dependsOn: copyFiles) {
	new File('../what/start.bat').write("java %1  -cp ./lib/*; play.core.server.NettyServer .")
}